plugins {
	id 'org.springframework.boot' version '2.2.5.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'java'
	id 'com.bmuschko.docker-remote-api' version "6.4.0"
	id 'com.bmuschko.docker-spring-boot-application' version "6.4.0"
}

group = 'io.github.gogotea55t.jiriki-sp'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
}

repositories {
	mavenCentral()
	gradlePluginPortal()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-amqp'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	compile group: 'com.github.ulisesbocchio', name: 'jasypt-spring-boot-starter', version: '2.1.0'
	compile 'com.google.api-client:google-api-client:1.30.4'
    compile 'com.google.oauth-client:google-oauth-client-jetty:1.30.6'
    compile 'com.google.apis:google-api-services-sheets:v4-rev581-1.25.0'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation 'org.springframework.amqp:spring-rabbit-test'
	compileOnly 'org.projectlombok:lombok:1.18.8'
	annotationProcessor("org.projectlombok:lombok")
}

test {
	useJUnitPlatform()
}

jar {
    baseName = 'jiriki-sp'
    archiveName = "${baseName}.jar"
}

docker {
  springBootApplication {
        baseImage = 'openjdk:8-alpine'
        ports = [9091, 8081]
        def ver = 'latest'
        if(project.hasProperty('ver')) {
          ver = project.property('ver')
        }
        images = ['bbp10-jiriki.cf:5000/bbp-jiriki-spreadsheet-sv:' + ver]
        def jasyptPass = 'secret'
        if (project.hasProperty('jasypt')) {
          jasyptPass = project.property('jasypt')
        }
        jvmArgs = ['-Dspring.profiles.active=production', '-Xmx2048m', "-Djava.security.egd=file:/dev/./urandom", "-Djasypt.encryptor.password=" + jasyptPass]
  }
  registryCredentials {
    url = 'bbp10-jiriki.cf:5000'
    username = project.hasProperty('dockerusername') ? project.property('dockerusername') : ''
    password = project.hasProperty('dockerpassword') ? project.property('dockerpassword') : ''
  }
}
